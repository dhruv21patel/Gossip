pipeline {
    agent any

    environment {
        // Define non-sensitive environment variables
        DOCKER_IMAGE_NAME_GO = 'Gossip_go' 
        DOCKER_IMAGE_NAME_JAVA = 'Gossip_java' 
        DOCKER_TAG = 'latest'           
        GIT_REPO_URL = 'https://github.com/your-repo.git'  
        SONARQUBE_SERVER = 'http://your-sonarqube-server'  
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git branch: 'main', url: "${env.GIT_REPO_URL}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
        
                    sh '''
                        cd Gossip
                        docker build -t ${DOCKER_IMAGE_NAME_JAVA}:${DOCKER_TAG} .
                    '''
                }
            }

            steps {
                script {
                
                    sh '''
                        cd ..
                        cd Gossip_Go
                        docker build -t ${DOCKER_IMAGE_NAME_GO}:${DOCKER_TAG} .
                    '''
                }
            }
        }

        stage('Scan with Trivy') {
            steps {
                script {
                    // Run security scan with Trivy
                    sh '''
                        echo "checking the java image"
                        trivy image ${DOCKER_IMAGE_NAME_JAVA}:${DOCKER_TAG}

                        echo " checking the go image"
                        trivy image ${DOCKER_IMAGE_NAME_GO}:${DOCKER_TAG}
                    '''
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                            mvn clean verify sonar:sonar -Dsonar.projectKey=my-project -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONARQUBE_TOKEN}
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME'),
                                     string(credentialsId: 'sonar-token', variable: 'SONARQUBE_TOKEN')]) {

                        // Log in to DockerHub
                        sh '''
                            echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                        '''
                        
                        // Push Docker image to DockerHub
                        sh '''
                            docker push ${DOCKER_IMAGE_NAME_GO}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE_NAME_JAVA}:${DOCKER_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after pipeline run
        }
    }
}
